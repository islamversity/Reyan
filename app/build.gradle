import com.islamversity.reyan.Deps
import com.islamversity.reyan.GlobalVars

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

apply from: "$rootDir/projectDependencyGraph.gradle"

//apply plugin: 'jacoco-android'
//check.dependsOn detekt

android {
    compileSdkVersion GlobalVars.projectCompileSdkVersion
    defaultConfig {
        archivesBaseName = "Reyan"
        applicationId "com.islamversity.reyan"
        minSdkVersion GlobalVars.projectMinSdkVersion
        targetSdkVersion GlobalVars.projectTargetSdkVersion
        versionCode 21000004
        versionName "0.0.4"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        release {
            storeFile file(releaseKeyStoreAddress)
            storePassword "$releaseKeyStorePass"
            keyAlias "$releaseKeyAlias"
            keyPassword "$releaseKeyPass"
        }
        debug {
            storeFile file(debugKeyStoreAddress)
            storePassword "$debugKeyStorePass"
            keyAlias "$debugKeyAlias"
            keyPassword "$debugKeyPass"
        }
    }
    buildTypes {
        release {
            debuggable GlobalVars.isReleaseDebuggable
            minifyEnabled GlobalVars.isReleaseMinify
            multiDexEnabled GlobalVars.isReleaseMultiDex
            proguardFiles(getDefaultProguardFile("proguard-android.txt"),
                    GlobalVars.proguardFileAddress)
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable GlobalVars.isDebugDebuggable
            minifyEnabled GlobalVars.isDebugMinify
            multiDexEnabled GlobalVars.isDebugMultiDex
            proguardFiles(getDefaultProguardFile("proguard-android.txt"),
                    GlobalVars.proguardFileAddress)
//            testCoverageEnabled true
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/slider_release.kotlin_module'
        exclude 'META-INF/kotlinx-serialization-runtime.kotlin_module'
        exclude 'META-INF/ktor-http.kotlin_module'
        exclude 'META-INF/ktor-utils.kotlin_module'
        exclude 'META-INF/ktor-io.kotlin_module'
        exclude 'META-INF/ktor-http-cio.kotlin_module'
        exclude 'META-INF/ktor-client-core.kotlin_module'
        exclude 'META-INF/ktor-client-serialization.kotlin_module'
        exclude 'META-INF/ktor-client-json.kotlin_module'
        exclude 'META-INF/core.kotlin_module'
        pickFirst("META-INF/kotlinx-coroutines-core.kotlin_module")
    }
    androidExtensions {
        defaultCacheImplementation = "SPARSE_ARRAY"
        experimental = true
    }

    testOptions.unitTests.includeAndroidResources = true
    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDirs += sharedTestDir
        }

        androidTest {
            java.srcDirs += sharedTestDir
        }
    }
    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation Deps.Kotlin.jvmStd8

    testImplementation Deps.Android.Test.junit
    testImplementation Deps.Android.Test.truth
    testImplementation Deps.Android.Test.mockkUnit
    testImplementation Deps.Android.Test.robolectric
    testImplementation Deps.Android.Test.runner
    testImplementation Deps.Android.Test.core
    testImplementation Deps.Android.Test.rules
    testImplementation Deps.Android.Test.junitExt
    testImplementation Deps.Android.Test.espressoCore

    androidTestImplementation Deps.Android.Test.runner
    androidTestImplementation Deps.Android.Test.core
    androidTestImplementation Deps.Android.Test.rules
    androidTestImplementation Deps.Android.Test.junitExt
    androidTestImplementation Deps.Android.Test.espressoCore
    androidTestImplementation Deps.Android.Test.espressoIntents

    implementation(project(Deps.Modules.viewComponent))
    implementation(project(Deps.Modules.core))
    implementation(project(Deps.Modules.domain))
    implementation(project(Deps.Modules.base))
    implementation(project(Deps.Modules.daggerCore))
    implementation(project(Deps.Modules.quranHome))
    implementation(project(Deps.Modules.navigation))
    implementation(project(Deps.Modules.search))
    implementation(project(Deps.Modules.settings))
    implementation(project(Deps.Modules.surah))

    implementation Deps.Android.Support.design

    implementation Deps.Android.Support.viewModel

    implementation Deps.Dagger.dagger
    kapt Deps.Dagger.daggerCompiler
    implementation Deps.Dagger.jetbrainsAnnotation

    implementation Deps.Android.Networking.okHttpLogging
    implementation Deps.Android.Networking.okHttp

    implementation Deps.Android.Support.compat
    implementation Deps.Android.Support.coreKts

    implementation Deps.Coroutines.common
    implementation Deps.Coroutines.android

    implementation Deps.Android.Tools.conductor

    implementation Deps.Android.Tools.localization

    implementation Deps.Firebase.analytics
    implementation Deps.Firebase.crashlyticsSDK
    implementation Deps.Firebase.messaging

    debugImplementation Deps.Android.Tools.leakCanary

    implementation Deps.Android.Tools.epoxy
    kapt Deps.Android.Tools.epoxyCompiler

    debugImplementation Deps.Android.Tools.soLoader
    debugImplementation Deps.Android.Tools.flipper
    releaseImplementation Deps.Android.Tools.flipperNoOp
    debugImplementation Deps.Android.Tools.flipperNetworkPlugin
    debugImplementation Deps.Android.Tools.flipperFrescoPlugin

    debugImplementation Deps.Android.Tools.stetho
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.1'

    implementation Deps.Tools.logger
}


//project.afterEvaluate {
//    //Gather build type and product flavor names in a list
//    def buildTypes = android.buildTypes.collect { type -> type.name }
//    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
//    if (!productFlavors) productFlavors.add('')
//
//    productFlavors.each { productFlavorName ->
//        buildTypes.each { buildTypeName ->
//
//            //Define the sourceName and the sourcePath.
//            def sourceName, sourcePath
//            if (!productFlavorName) {
//                sourceName = sourcePath = "${buildTypeName}"
//            } else {
//                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
//                sourcePath = "${productFlavorName}/${buildTypeName}"
//            }
//
//            def testTaskName = "test${sourceName.capitalize()}UnitTest"
//
//            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {
//
//                group = "Reporting"
//                description =
//                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
//
//                reports {
//                    xml.enabled true
////                    removed for faster builds
//                    html.enabled true
//                }
//
//                //Directory where the compiled class files are
//                classDirectories =
//                        fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
//                                excludes: ['**/R.class',
//                                           '**/BR.class',
//                                           '**/R$*.class',
//                                           '**/*$ViewInjector*.*',
//                                           '**/*$ViewBinder*.*',
//                                           '**/BuildConfig.*',
//                                           'android/**',
//                                           '**/Manifest*.*',
//                                           '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
//                                           '**/*Module.*', // Modules for Dagger.
//                                           '**/*Dagger*.*', // Dagger auto-generated code.
//                                           '**/*MembersInjector*.*', // Dagger auto-generated code.
//                                           '**/*_Provide*Factory*.*',
//                                           '**/*_Factory.*', //Dagger auto-generated code
//                                           '**/*$*$*.*', // Anonymous classes generated by kotlin
//                                           '**/*Activity.class' //exclude activities
//                                ])
//
//                sourceDirectories = files(["src/main/java",
//                                           "src/main/kotlin",
//                                           "src/$productFlavorName/java",
//                                           "src/$productFlavorName/kotlin",
//                                           "src/$buildTypeName/java",
//                                           "src/$buildTypeName/kotlin"])
//
//                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
//            }
//        }
//    }
//}
